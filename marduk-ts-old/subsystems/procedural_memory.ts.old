// Procedural Memory manages workflows, methods, and step-by-step instructions

import { Message, TaskMessage, ResponseMessage } from "../types/messages.ts";

const ws = new WebSocket("ws://localhost:8080");

// Simulated procedural workflows
const workflows = [
  {
    id: 1,
    title: "Chaos Theory Analysis",
    steps: ["Define objectives", "Collect data", "Run simulations", "Analyze results"],
  },
  {
    id: 2,
    title: "Bug Resolution Workflow",
    steps: ["Identify issue", "Reproduce bug", "Fix code", "Test solution"],
  },
];

ws.onopen = () => {
  console.log("Procedural Memory connected to WebSocket server");
  ws.send(JSON.stringify({ type: "register", subsystem: "procedural_memory" }));
};

ws.onmessage = (event) => {
  try {
    const message: Message = JSON.parse(event.data);

    if (message.type === "task" && message.query.includes("workflow")) {
      const matchingWorkflows = queryWorkflows(message.query);
      const response: ResponseMessage = {
        type: "response",
        subsystem: "procedural_memory",
        task_id: message.task_id,
        result: matchingWorkflows,
      };
      ws.send(JSON.stringify(response));
    }
  } catch (error) {
    console.error("Error processing task:", error);
  }
};

function queryWorkflows(query: string): string[] {
  // Example: Retrieve workflows based on keywords
  return workflows.map((workflow) => `${workflow.title}: ${workflow.steps.join(", ")}`);
}
